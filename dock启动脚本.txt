本机
Redis
docker run --name redis-container --restart="always" -d -p 6379:6379 redis

Mongodb
docker run --name mongo-container --restart="always" -p 27017:27017 -v /Users/lizhengqing/Documents/mongodbData:/data/db -d mongo

自定义的消息队列（nodejs）
docker run --restart="always" -d --name nodejsqueue -v /Users/lizhengqing/Documents/DockerContainer/nodejsqueue:/usr/local/nodejsqueue --link redis-container:redisdb --link mongo-container:mongodb tymx/nodejsqueue:v1

数据包抓取
docker run --restart="always" -d -p 8001:8001 -p 8002:8002 -p 8013:8013 -v /Users/lizhengqing/Documents/DockerContainer/anyproxy4_x:/usr/local/anyproxy --link nodejsqueue:nodejsQueue tymx/anyproxy406:v2 --intercept --rule /usr/local/anyproxy/rulefiles/rule.js

手机监控
docker run --restart="always" -itd --name ecologicalmonitor -v /Users/lizhengqing/Documents/DockerContainer/monkeyrunner/ecological:/usr/local/monkeyrunner/ecological --link redis-container:redisdb --link mongo-container:mongodb --net=container:adbd tymx/ecological:v1

mysql
docker run --name mysql-container -v /Users/lizhengqing/Documents/mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql

================================================================================
测试服务器

Redis
docker run --name redis-container --restart="always" -d -p 6379:6379 redis

Mongodb
docker run --name mongo-container --restart="always" --privileged=true -p 27017:27017 -v /mnt/mongodata:/data/db -d mongo

mysql服务
docker run --name mysql-container -v /mnt/mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql

ADB服务
docker run -d --privileged --net host -v /dev/bus/usb:/dev/bus/usb --name adbd sorccu/adb


自定义的消息队列（nodejs）
docker run --log-driver=gelf --log-opt gelf-address=udp://127.0.0.1:12201 --log-opt tag=nodejsqueue --restart="always" --name nodejsqueue -d -v /home/tymx/Documents/DockerContainer/nodejsqueue:/usr/local/nodejsqueue -v /mnt/upload_files:/usr/local/nodejsqueue/redisService/uploads -p 3000:3000 tymx/nodejsqueue:v1

docker run --restart="always" --name nodejsqueue -d -v /home/tymx/Documents/DockerContainer/nodejsqueue:/usr/local/nodejsqueue -v /mnt/upload_files:/usr/local/nodejsqueue/redisService/uploads -p 3000:3000 tymx/nodejsqueue:v1

数据包抓取
docker run --restart="always" --name anyproxy -d -p 7001:8001 -p 7002:8002 -p 7013:8013 -v /home/tymx/Documents/DockerContainer/anyproxy4_x:/usr/local/anyproxy tymx/anyproxy406:v1 --intercept --rule /usr/local/anyproxy/rulefiles/rule.js


手机控制
docker run --log-driver=gelf --log-opt gelf-address=udp://127.0.0.1:12201 --log-opt tag=phonecontroller --restart="always" -itd --name phonecontroller -v /home/tymx/Documents/DockerContainer/monkeyrunner/ecological:/usr/local/monkeyrunner/ecological --link redis-container:redisdb --link mongo-container:mongodb --net=container:adbd tymx/ecological:v1

docker run --restart="always" -itd --name ecologicalmonitor -v /home/tymx/Documents/DockerContainer/monkeyrunner/ecological:/usr/local/monkeyrunner/ecological --link redis-container:redisdb --link mongo-container:mongodb tymx/ecological:v1


图片下载服务
docker run --log-driver=gelf --log-opt gelf-address=udp://127.0.0.1:12201 --log-opt tag= imagedownload --restart="always" -itd --name imagedownload -v /home/tymx/Documents/DockerContainer/ECOServer:/usr/local/imagedownload -v /mnt/download_media:/usr/local/imagedownload/downloadServer/files tymx/mediadownload:v1

docker run --restart="always" -itd --name imagedownload -v /home/tymx/Documents/DockerContainer/ECOServer:/usr/local/imagedownload -v /mnt/download_media:/usr/local/imagedownload/downloadServer/files tymx/mediadownload:v1

解析服务
docker run --log-driver=gelf --log-opt gelf-address=udp://127.0.0.1:12201 --log-opt tag= ecoserver --restart="always" -itd --name ecoserver -v /home/tymx/Documents/DockerContainer/ECOServer:/usr/local/ECOServer --link mysql-container:mysqldb tymx/ecoserver:v1

docker run --restart="always" -itd --name ecoserver -v /home/tymx/Documents/DockerContainer/ECOServer:/usr/local/ECOServer --link mysql-container:mysqldb tymx/ecoserver:v1
截图OCR服务
docker run --restart="always" -itd --name ocrserver -v /home/tymx/Documents/DockerContainer/ECOServer:/usr/local/ECOServer tymx/ecoserver:v1 python /usr/local/ECOServer/screencap_match_main.py


# 启动dockerui
docker run --restart="always" -d -p 19000:9000 -v /var/run/docker.sock:/docker.sock \
--name dockerui abh1nav/dockerui:latest -e="/docker.sock"

#如何映射网盘
sudo mount -t nfs 192.168.10.43:/volume1/upload_files /home/tymx/Documents/DockerContainer/nodejsqueue/redisService/uploads

/Documents/DockerContainer/nodejsqueue/redisService/uploads
curl -i -H "Accept: application/json" -H "Content-Type: application/json" -X POST -d "{\"tag\":\"今日头条\",\"msg\":\"这是一条push消息\",\"time\":1111111111111,\"imgfile\":\"11111.jpg\"}" http://192.168.10.52:3000/push

[global]
debug=true
redisip = redisdb
redisdb = 0
mongodbip = mongodb


db.originnews.save({
  "title": "这里是标题",
  "description": "这里是描述",
  "content": "这里是内容",
  "source": "这里是来源",
  "pubtimestr": "这里是发布时间",
  "pubtime": "123",
  "crawltimestr": "这里是抓取时间",
  "crawltime": "123",
  "status": "这里是状态，默认是0，处理过后变成了1",
  "shorturl": "这里是文章的地址",
  "logo": "这里是图标，可以为空",
  "labels": "这里是标签，可以有多个，以\",\"分割",
  "keyword": "这里是关键字，可以为空",
  "feedback": "评论数",
  "identity": "唯一标示",
  "appname": "所属app",
  "category": "栏目”,
  “restype”:”资源类型1图文 2图片 3视频”  
});



调用原子服务
Http method:POST
数据格式:
{"mq":"x1","seq":x2,"data":x3,"resid":x4,"resp":"x5"}
x1--用于记录子任务状态的缓存hashset
X2--子任务序号，从1开始编号
x3--需要解析的数据内容，json格式[],如果是文本则可能[文本，标示];如果是图片则[图片url,数据中心地址,处理后保存地址]
X4--资源的id
X5--子任务状态修改完后，通知处理程序，向"recvjob:"+x5的消息队列中插入一个值（resid）


OCR服务
发送队列
队列 ocr:queue
数据 {"resid":"xxx","title":"xxxx","imgs":[],"seqs":[]}
接收结果队列
队列 ocr:result
数据 {"resid":"xxx","img":"xxxx","seq":"xxx"}